# converter.py
import sys
import os
import subprocess
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def convert_document(input_path, output_format):
    """
    Converts a document using unoconv.
    Requires LibreOffice and unoconv to be installed and accessible in PATH.
    """
    if not os.path.exists(input_path):
        logging.error(f"Input file not found: {input_path}")
        raise FileNotFoundError(f"Input file not found: {input_path}")

    # Determine output directory (same as input for simplicity, unoconv behavior)
    output_dir = os.path.dirname(input_path)
    base_name = os.path.basename(input_path)
    file_name_without_ext = os.path.splitext(base_name)[0]
    
    # unoconv will create a file named '<original_basename>.<output_format>' in the same directory
    expected_output_filename = f"{file_name_without_ext}.{output_format}"
    expected_output_path = os.path.join(output_dir, expected_output_filename)

    # Ensure previous conversion attempts' output files are removed to avoid stale files
    if os.path.exists(expected_output_path):
        try:
            os.remove(expected_output_path)
            logging.info(f"Removed stale output file: {expected_output_path}")
        except Exception as e:
            logging.warning(f"Could not remove stale output file {expected_output_path}: {e}")

    cmd = [
        'unoconv',
        '-f', output_format,
        input_path
    ]
    
    logging.info(f"Executing command: {' '.join(cmd)}")
    
    try:
        # Run unoconv. It often returns 0 even if it fails to create the file.
        # Check stderr for actual errors.
        process = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
            check=False # Do not raise an exception for non-zero exit codes immediately
        )
        
        if process.returncode != 0:
            logging.error(f"unoconv exited with code {process.returncode}: {process.stderr}")
            raise Exception(f"Conversion failed (unoconv error): {process.stderr}")
        
        if process.stderr:
            logging.warning(f"unoconv warnings/errors in stderr: {process.stderr}")

        if not os.path.exists(expected_output_path):
            # This is critical: unoconv might exit 0 but fail to create file (e.g., malformed input)
            logging.error(f"unoconv command finished but output file not found: {expected_output_path}")
            raise Exception(f"Conversion failed: Output file not generated by unoconv. Stderr: {process.stderr}")

        logging.info(f"Successfully converted {input_path} to {expected_output_path}")
        return expected_output_path

    except FileNotFoundError:
        logging.error("unoconv command not found. Please ensure LibreOffice and unoconv are installed and in your system's PATH.")
        raise RuntimeError("unoconv not found. Install LibreOffice and unoconv.")
    except Exception as e:
        logging.error(f"Error during conversion: {e}")
        raise

if __name__ == "__main__":
    if len(sys.argv) != 3:
        logging.error("Usage: python converter.py <input_file_path> <output_format>")
        sys.exit(1)

    input_file = sys.argv[1]
    output_fmt = sys.argv[2] # 'pdf' or 'docx'

    try:
        converted_file_path = convert_document(input_file, output_fmt)
        print(converted_file_path) # Print the output path for Node.js to capture
        sys.exit(0)
    except Exception as e:
        logging.error(f"Script failed: {e}")
        sys.exit(1)